trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  pythonVersion: 3.12
  pipDownloadDir: $(Pipeline.Workspace)/.pip
  pipCacheDir: /home/vsts/.cache/pip

stages:
  - stage: build
    displayName: Build
    jobs:
      - job: build
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(pythonVersion)
            displayName: Use Python $(pythonVersion)

# caching needs more work, will revisit later
#          - script: |
#              export PYVER=$(python -c "import platform; print(platform.python_version())")
#              echo "##vso[task.setvariable variable=pythonVersion;]${PYVER}"
#            displayName: Set specific version
#
#          - script: |
#              echo "pythonVersion == $(pythonVersion)"
#            displayName: Show specific version
#
#          - script: |
#              export PYINSTALL="/opt/hostedtoolcache/Python/$(pythonVersion)/x64/lib/python$(pythonVersion)/site-packages"
#              echo "##vso[task.setvariable variable=pythonInstall;]${PYINSTALL}"
#            displayName: Set pip install location
#
#          - script: |
#              echo "pythonInstall == $(pythonInstall)"
#            displayName: Show specific install location
#
#          - task: Cache@2
#            inputs:
#              key: 'pip downloads | "$(Agent.OS)" | requirements.txt'
#              restoreKeys: |
#                pip downloads | "$(Agent.OS)"
#              path: $(pipDownloadDir)
#              cacheHitVar: downloadCacheRestored
#            displayName: Cache pip downloads
#
#          - task: Cache@2
#            inputs:
#              key: 'pip cache | "$(Agent.OS)" | requirements.txt'
#              restoreKeys: |
#                pip install | "$(Agent.OS)"
#              path: $(pipCacheDir)
#              cacheHitVar: pipCacheRestored
#            displayName: Cache pip cache
#
#          - task: Cache@2
#            inputs:
#              key: 'pip installs | "$(Agent.OS)" | requirements.txt'
#              restoreKeys: |
#                pip install | "$(Agent.OS)"
#              path: $(pythonInstall)
#              cacheHitVar: installCacheRestored
#            displayName: Cache pip installs
#
#          - script: |
#              pip download -r requirements.txt --dest=$(pipDownloadDir)
#            displayName: Download requirements
#            condition: eq(variables.downloadCacheRestored, 'false')
#
#          - script: |
#              pip install -r requirements.txt --no-index --find-links=$(pipDownloadDir)
#            displayName: Install requirements

          - script: |
              pip install -r requirements.txt
            displayName: Install requirements

          - script: |
              pytest -v --junitxml=junit/test-results.xml --cov-report=xml --cov=src
            displayName: pytest

          - task: PublishCodeCoverageResults@2
            displayName: Publish Cobertura Coverage Report
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml
              reportDirectory: $(System.DefaultWorkingDirectory)/**/htmlcov

          - task: ArchiveFiles@2
            displayName: Archive files
            inputs:
              rootFolderOrFile: $(System.DefaultWorkingDirectory)
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-$(python --version).zip
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: $(Build.ArtifactStagingDirectory)
              ArtifactName: pythonarchive
